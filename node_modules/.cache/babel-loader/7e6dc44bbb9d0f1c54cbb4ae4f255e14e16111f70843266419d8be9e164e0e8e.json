{"ast":null,"code":"var _jsxFileName = \"/home/njeri/Desktop/MORINGA/phase-2/week-2-Bot-Battlr-code-challenge/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport SortBar from './SortBar';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //Declared variables for rendering the bots\n  const [bots, setBots] = useState([]);\n  const [yourBotArmy, setYourBotArmy] = useState([]);\n  const [sortBy, setSortBy] = useState(null);\n\n  //Fetching the bot data from deployed db.json \n  useEffect(() => {\n    fetch('https://bot-app-data.onrender.com/bots').then(response => response.json()).then(data => setBots(data)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // Function to add a bot to the bot army\n  const addToYourBotArmy = bot => {\n    // Check if the bot is not already in the yourBotArmy before adding\n    if (!yourBotArmy.find(b => b.id === bot.id)) {\n      setYourBotArmy([...yourBotArmy, bot]);\n    }\n  };\n\n  // Function to remove a bot from the yourBotArmy\n  const removeFromYourBotArmy = bot => {\n    setYourBotArmy(yourBotArmy.filter(b => b.id !== bot.id));\n  };\n\n  //function to delete bot from deployed DB \n\n  const handleBotDeletion = botId => {\n    fetch(`https://bot-app-data.onrender.com/bots/${botId}`, {\n      method: 'DELETE'\n    }).then(response => response.json()).then(() => {\n      setBots(prevBots => prevBots.filter(bot => bot.id !== botId));\n    }).catch(error => console.error('Error deleting bots:', error));\n  };\n\n  //function to handle sorting\n  const handleSortChange = sortBy => {\n    setSortBy(sortBy);\n  };\n  return (\n    /*#__PURE__*/\n    //Rendering bots on the web page\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n        bots: bots,\n        yourBotArmy: yourBotArmy,\n        removeFromArmy: removeFromYourBotArmy,\n        botDeletion: handleBotDeletion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n        onSortChange: handleSortChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: bots,\n        addToArmy: addToYourBotArmy,\n        sortBy: sortBy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(App, \"CWcLKCQEQm5sCtJJpQry+h+CaVs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","SortBar","jsxDEV","_jsxDEV","App","_s","bots","setBots","yourBotArmy","setYourBotArmy","sortBy","setSortBy","fetch","then","response","json","data","catch","error","console","addToYourBotArmy","bot","find","b","id","removeFromYourBotArmy","filter","handleBotDeletion","botId","method","prevBots","handleSortChange","className","children","removeFromArmy","botDeletion","fileName","_jsxFileName","lineNumber","columnNumber","onSortChange","addToArmy","_c","$RefreshReg$"],"sources":["/home/njeri/Desktop/MORINGA/phase-2/week-2-Bot-Battlr-code-challenge/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport SortBar from './SortBar';\nimport './App.css';\n\nfunction App() {\n  //Declared variables for rendering the bots\n    const [bots, setBots] = useState([]);\n    const [yourBotArmy, setYourBotArmy] = useState([]);\n    const [sortBy, setSortBy] = useState(null);\n\n   \n\n\n    //Fetching the bot data from deployed db.json \n    useEffect(() => {\n      fetch('https://bot-app-data.onrender.com/bots')\n        .then((response) => response.json())\n        .then((data) => setBots(data))\n        .catch((error) => console.error('Error fetching data:', error));\n    }, []);\n\n\n     // Function to add a bot to the bot army\n  const addToYourBotArmy = (bot) => {\n    // Check if the bot is not already in the yourBotArmy before adding\n    if (!yourBotArmy.find((b) => b.id === bot.id)) {\n      setYourBotArmy([...yourBotArmy, bot]);\n    }\n  };\n\n  // Function to remove a bot from the yourBotArmy\n  const removeFromYourBotArmy = (bot) => {\n    setYourBotArmy(yourBotArmy.filter((b) => b.id !== bot.id));\n  };\n\n  //function to delete bot from deployed DB \n\n  const handleBotDeletion = (botId) => {\n    fetch(`https://bot-app-data.onrender.com/bots/${botId}`, {\n      method: 'DELETE',\n    })\n      .then((response) => response.json())\n      .then(() => {\n        setBots((prevBots) =>\n        prevBots.filter((bot) => bot.id !== botId)\n        );\n      })\n      .catch((error) => console.error('Error deleting bots:', error));\n  };\n\n  //function to handle sorting\n  const handleSortChange = (sortBy) => {\n    setSortBy(sortBy)\n  }\n\n  return (\n    //Rendering bots on the web page\n    <div className=\"App\">\n      <YourBotArmy bots={bots} yourBotArmy={yourBotArmy} removeFromArmy={removeFromYourBotArmy} botDeletion={handleBotDeletion} />\n      <SortBar onSortChange={handleSortChange}/>\n      <BotCollection bots={bots}  addToArmy={addToYourBotArmy} sortBy={sortBy}   />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
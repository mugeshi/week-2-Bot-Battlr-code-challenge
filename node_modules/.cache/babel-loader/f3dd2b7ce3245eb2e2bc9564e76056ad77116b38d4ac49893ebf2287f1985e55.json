{"ast":null,"code":"var _jsxFileName = \"/home/njeri/Desktop/MORINGA/phase-2/week-2-Bot-Battlr-code-challenge/src/BotContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext } from 'react';\nimport { useState, useEffect, useContext } from 'react';\n\n// create context object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotContext = /*#__PURE__*/createContext();\nexport const useBotContext = () => {\n  _s();\n  const context = useContext(BotContext);\n  if (!context) {\n    throw new Error('useBotContext must be used within a BotProvider');\n  }\n  return context;\n};\n\n// create context provider\n_s(useBotContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default function BotProvider({\n  children\n}) {\n  _s2();\n  const [botData, setBotData] = useState([]);\n  const [enlistedBots, setEnlistedBots] = useState([]);\n  const enlistBot = bot => {\n    if (!enlistedBots.find(enlistedBot => enlistedBot.id === bot.id)) {\n      setEnlistedBots(prevEnlistedBots => [...prevEnlistedBots, bot]);\n    }\n  };\n  const unenlistBot = botId => {\n    setEnlistedBots(prevEnlistedBots => prevEnlistedBots.filter(bot => bot.id !== botId));\n  };\n  const deleteBot = botId => {\n    fetch(`https://botdata.onrender.com/bots/${botId}`, {\n      method: 'DELETE'\n    });\n    setEnlistedBots(prevEnlistedBots => prevEnlistedBots.filter(bot => bot.id !== botId));\n  };\n  const values = {\n    botData,\n    enlistedBots,\n    enlistBot,\n    unenlistBot,\n    deleteBot\n  };\n  useEffect(() => {\n    fetch(\"https://botdata.onrender.com/bots\").then(res => res.json()).then(data => setBotData(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BotContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s2(BotProvider, \"Kph4OpSM6T+Df+xgLLeW5cLudtQ=\");\n_c = BotProvider;\nexport { BotContext };\nvar _c;\n$RefreshReg$(_c, \"BotProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","BotContext","useBotContext","_s","context","Error","BotProvider","children","_s2","botData","setBotData","enlistedBots","setEnlistedBots","enlistBot","bot","find","enlistedBot","id","prevEnlistedBots","unenlistBot","botId","filter","deleteBot","fetch","method","values","then","res","json","data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/njeri/Desktop/MORINGA/phase-2/week-2-Bot-Battlr-code-challenge/src/BotContext.js"],"sourcesContent":["import React, { createContext } from 'react';\nimport { useState, useEffect, useContext } from 'react';\n\n// create context object\nconst BotContext = createContext()\n\nexport const useBotContext = () => {\n    const context = useContext(BotContext);\n    if (!context) {\n        throw new Error('useBotContext must be used within a BotProvider');\n    }\n    return context;\n};\n\n// create context provider\nexport default function BotProvider({ children }) {\n    const [botData, setBotData] = useState([]);\n    const [enlistedBots, setEnlistedBots] = useState([]);\n\n    const enlistBot = (bot) => {\n        if (!enlistedBots.find((enlistedBot) => enlistedBot.id === bot.id)) {\n            setEnlistedBots((prevEnlistedBots) => [...prevEnlistedBots, bot]);\n        }\n    };\n\n    const unenlistBot = (botId) => {\n        setEnlistedBots((prevEnlistedBots) => prevEnlistedBots.filter((bot) => bot.id !== botId));\n    };\n\n    const deleteBot = (botId) => {\n        fetch(`https://botdata.onrender.com/bots/${botId}`, {\n            method: 'DELETE'\n        });\n        setEnlistedBots((prevEnlistedBots) => prevEnlistedBots.filter((bot) => bot.id !== botId));\n    };\n\n    const values = {\n        botData,\n        enlistedBots,\n        enlistBot,\n        unenlistBot,\n        deleteBot,\n    };\n\n    useEffect(() => {\n        fetch(\"https://botdata.onrender.com/bots\")\n            .then((res) => res.json())\n            .then((data) => setBotData(data))\n    }, [])\n\n    return (\n        <BotContext.Provider value={values}>\n            {children}\n        </BotContext.Provider>\n    )\n}\n\nexport { BotContext };\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,QAAQ,OAAO;AAC5C,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;AAElC,OAAO,MAAMO,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGN,UAAU,CAACG,UAAU,CAAC;EACtC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACtE;EACA,OAAOD,OAAO;AAClB,CAAC;;AAED;AAAAD,EAAA,CARaD,aAAa;AAS1B,eAAe,SAASI,WAAWA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMiB,SAAS,GAAIC,GAAG,IAAK;IACvB,IAAI,CAACH,YAAY,CAACI,IAAI,CAAEC,WAAW,IAAKA,WAAW,CAACC,EAAE,KAAKH,GAAG,CAACG,EAAE,CAAC,EAAE;MAChEL,eAAe,CAAEM,gBAAgB,IAAK,CAAC,GAAGA,gBAAgB,EAAEJ,GAAG,CAAC,CAAC;IACrE;EACJ,CAAC;EAED,MAAMK,WAAW,GAAIC,KAAK,IAAK;IAC3BR,eAAe,CAAEM,gBAAgB,IAAKA,gBAAgB,CAACG,MAAM,CAAEP,GAAG,IAAKA,GAAG,CAACG,EAAE,KAAKG,KAAK,CAAC,CAAC;EAC7F,CAAC;EAED,MAAME,SAAS,GAAIF,KAAK,IAAK;IACzBG,KAAK,CAAE,qCAAoCH,KAAM,EAAC,EAAE;MAChDI,MAAM,EAAE;IACZ,CAAC,CAAC;IACFZ,eAAe,CAAEM,gBAAgB,IAAKA,gBAAgB,CAACG,MAAM,CAAEP,GAAG,IAAKA,GAAG,CAACG,EAAE,KAAKG,KAAK,CAAC,CAAC;EAC7F,CAAC;EAED,MAAMK,MAAM,GAAG;IACXhB,OAAO;IACPE,YAAY;IACZE,SAAS;IACTM,WAAW;IACXG;EACJ,CAAC;EAEDzB,SAAS,CAAC,MAAM;IACZ0B,KAAK,CAAC,mCAAmC,CAAC,CACrCG,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKnB,UAAU,CAACmB,IAAI,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI7B,OAAA,CAACC,UAAU,CAAC6B,QAAQ;IAACC,KAAK,EAAEN,MAAO;IAAAlB,QAAA,EAC9BA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAE9B;AAAC3B,GAAA,CAxCuBF,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AA0CnC,SAASL,UAAU;AAAG,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}